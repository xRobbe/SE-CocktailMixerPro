
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/RezepturProzessor.h" 0
//@(#) RezepturProzessor.h

                             
                             


                  
                     
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/Entleerer.h" 0
//@(#) Entleerer.h

                     
                     

//Entleert den Inhalt der Mischschüssel
class Entleerer
{
	
public:
	//
	Entleerer();
	//
	void setOffen(bool bOffen);
	
private:
	//
	bool bOffen;
	
	
};

      

#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/RezepturProzessor.h" 8
                   
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/Mischer.h" 0
//@(#) Mischer.h

                   
                   

//Mischt den Inhalt der Mischschüssel
class Mischer
{
	
public:
	//
	Mischer();
	//
	void setAktiv(bool bAktiv);
	
private:
	//
	bool bAktiv;
	
	
};

      

#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/RezepturProzessor.h" 9
                    
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/Stampfer.h" 0
//@(#) Stampfer.h

                    
                    

//Stampft den Inhalt der Mischschüssel
class Stampfer
{
	
public:
	//
	void setAktiv(bool bAktiv);
	//
	Stampfer();
	
private:
	//
	bool bAktiv;
	
	
};

      

#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/RezepturProzessor.h" 10
                 
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/Waage.h" 0
//@(#) Waage.h

                 
                 

//Wiegt den Inhalt der Mischschüssel
class Waage
{
	
public:
	//
	long int getDeltaGewich();
	//
	long int getGewicht();
	//
	void setGewicht(long int gewicht);
	//
	Waage();
	
private:
	//
	long int iGewicht;
	
	//
	long int iGewichtDelta;
	
	
};

      

#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/RezepturProzessor.h" 11
                          
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/VerfRezeptbuch.h" 0
//@(#) VerfRezeptbuch.h

                          
                          

                                      
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/code/Rezeptbuch/Rezeptbuch.h" 0
/**********************************************************************************/
/*                                Deklarationsmodul                               */
/**********************************************************************************/
/* 
 * generiert mit MagicDraw
 *
 * erstellt am: 04.10.2013  14:49:08
 * Repository : RezeptbuchV5
 * Modell     : Rezeptbuch
 * Benutzer   : RaHa 
 * File       : Rezeptbuch.h
 *
 */


                         
                         

              
                

using namespace std;


/*Jeder Rezeptsschritt hat eine Zutat und eine Menge. Das wird frei interpretiert, d.h. eine Zutat kann auch "Mixen" sein. Die Menge bezieht sich dann auf die Zeit (20 = 20 Sekunden)
 */
class Rezeptschritt
{
   /*Der Name der Zutat */
	string m_Zutat;
   
   /*Die Menge der Zutat - das können Sekunden, Stück oder Gramm sein */
	float m_Menge;
   
   public:
	/*Konstruktor */
	Rezeptschritt( void );
   
   /*Destruktor */
	virtual ~Rezeptschritt( );
   
   /*Liefert die Zutat des Rezeptschrittes */
	virtual string getZutat( void ) const;
   
   /*Liefert den Wert des Rezeptschrittes (die Menge) */
	virtual float getMenge( void ) const;
   
   /*Setzt die Zutat des Rezeptschrittes */
	virtual void setZutat( string m_Zutat );
   
   /*Setzt den Wert des Rezeptschrittes (die Menge) */
	virtual void setMenge( float m_Menge );
   
};


/*Ein Rezept hat einen Namen und verwaltet eine beliebig lange Liste von Rezeptschritten.
 */
class Rezept
{
   /*Jedes Rezept besteht aus vielen Rezeptschritten. Die werden hier (geordnet) in einer Liste abgelegt.
	 */
	list<Rezeptschritt> m_Rezeptschritte;
   
   /*Der Name des Rezeptes	 */
	string m_Name;
   
   public:
	/*Konstruktor - legt ein Rezept an. */
	Rezept( void );
   
   /*Destruktor. Löscht ein Rezept inklusive der enthaltenen Rezeprtschritte. */
	virtual ~Rezept( );

   
   /*Liefert die Anzahl der Rezeptschritte */
	virtual int getAnzahlRezeptschritte( );

   /*Liefert einen Verweis auf den i-ten Rezeptschritt (0..n-1).
	 *Sonst wird eine NULL geliefert.
	 */
	virtual Rezeptschritt * getRezeptSchritt( unsigned int i );
   
   /*Liefert den Namen des Rezeptes */
	virtual string getName( void ) const;
   
   /*Setzt den Namen des Rezeptes */
	virtual void setName( string Name );

   /*Erzeugt einen neuen Rezeptschritt mit der übergebenen Zutat und der Menge und hängt den an die Liste der Schritte an.
	 */
	virtual void append( string z, float m );
   
};

/*Das Rezeptbuch kennt eine Liste von Rezepten. Es bietet die Möglichkeit Rezepte zu suchen und abzufragen. Das Initialisieren der Rezepte erfolgt über den Dateileser. 
 */
class Rezeptbuch
{
   /*Ein Rezeptbuch besteht aus vielen Rezepten - diese werden als eine Liste abgelegt.
	 */
	list<Rezept *> m_Rezepte;

   public:
	/*Konstruktor; legt temporär einen Initialisierer an, damit dieser die Liste auffüllt.
	 */
	Rezeptbuch( void );
   
   /*Destruktor. Löscht insbesondere den Initialisierer */
	virtual ~Rezeptbuch( );
   
   /*Liefert die Anzahl der verfügbaren Rezepte. */
	virtual int getAnzahlRezepte( );

   /*Liefert das i-te Rezept aus der Liste (Werte von 0..n-1).
	 *Ansonsten NULL.
	 */
	virtual Rezept * getRezept( unsigned int i );
   /*Löscht das i-te Rezept. Liefert bei Erfolg true, sonst false. */
	virtual bool deleteRezept( unsigned int i );  
   

};

      

#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/VerfRezeptbuch.h" 9
                    
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/Dosierer.h" 0
//@(#) Dosierer.h

                    
                    


                  
                
                      
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/Zutatentyp.h" 0
//@(#) Zutatentyp.h

                      
                      

                
//
class Zutatentyp
{
	
public:
	//
	int getMenge();
	//
	int getTyp();
	//
	int getZeit();
	//
	Zutatentyp(int typ);
	
private:
	//
	int zeit;
	
	//
	int menge;
	
	//
	int typ;
	
	
};

      

#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/Dosierer.h" 12
//Dosiert die Menge einer Zutat
class Dosierer
{
	
public:
	//
	Dosierer(std::string sZutat);
	//
	std::string getInhalt();
	//
	Zutatentyp * getTyp();
	
private:
	//
	std::string sInhalt;
	
	//
	Zutatentyp * typ;
	
	
};

      

#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/VerfRezeptbuch.h" 10
                
                  
//
class VerfRezeptbuch: public Rezeptbuch
{
	
public:
	//
	~VerfRezeptbuch();
	//
	VerfRezeptbuch(std::vector<Dosierer *> dosierer);
	
};

      

#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/RezepturProzessor.h" 12
                    
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/Dosierer.h" 0
//@(#) Dosierer.h

                    
                    


                   
                 
                       
                               
              
 
	
       
	  
	                             
	  
	                        
	  
	                      
	
        
	  
	                    
	
	  
	                 
	
	
  

      

#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/RezepturProzessor.h" 13
                
                 
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/error.h" 0
/* 
 * File:   error.h
 * Author: robin
 *
 * Created on December 1, 2013, 2:04 PM
 */

               
       	       

                   

inline void error( const std::string& s ) { throw std::runtime_error( s ); }
inline void error( const std::string& s1, const std::string& s2 ) { error( s1 + s2 ); }

      	/* ERROR_H */
#__FILE__ _"/home/ldapusers/isttoschu/NetBeansProjects/SE-CocktailMixerPro/RezepturProzessor.h" 15
                  
//Steuert den Ablauf des Rezeptes. Ließt das Rezept aus dem VerfRezeptbuch.
class RezepturProzessor
{
//
	std::vector<Dosierer *> dosierer;
	//
	Entleerer * entleerer;
	//
	long int * iTimerMulti;
	//
	Mischer * mischer;
	//
	Stampfer * stampfer;
	//
	VerfRezeptbuch * vrBuch;
	//
	Waage * waage;
public:
	//
	RezepturProzessor();
    //
	void createDosierer(std::string fileName);
    //
	void debug();
};

      
